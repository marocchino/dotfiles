# main()
nt
snippet main
nt
	int main(int argc, const char *argv[])
nt
	{
nt
		${1}
nt
		return 0;
nt
	}
nt
snippet mainn
nt
	int main(void)
nt
	{
nt
		${1}
nt
		return 0;
nt
	}
nt
# #include <...>
nt
snippet inc
nt
	#include <${1:stdio}.h>${2}
nt
# #include "..."
nt
snippet Inc
nt
	#include "${1:`Filename("$1.h")`}"${2}
nt
# #ifndef ... #define ... #endif
nt
snippet Def
nt
	#ifndef $1
nt
	#define ${1:SYMBOL} ${2:value}
nt
	#endif${3}
nt
snippet def
nt
	#define
nt
snippet ifdef
nt
	#ifdef ${1:FOO}
nt
		${2:#define }
nt
	#endif
nt
snippet #if
nt
	#if ${1:FOO}
nt
		${2}
nt
	#endif
nt
# Header Include-Guard
nt
snippet once
nt
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}
nt

nt
	#define $1
nt

nt
	${2}
nt

nt
	#endif /* end of include guard: $1 */
nt
# If Condition
nt
snippet if
nt
	if (${1:/* condition */}) {
nt
		${2:/* code */}
nt
	}
nt
snippet el
nt
	else {
nt
		${1}
nt
	}
nt
# Ternary conditional
nt
snippet t
nt
	${1:/* condition */} ? ${2:a} : ${3:b}
nt
# Do While Loop
nt
snippet do
nt
	do {
nt
		${2:/* code */}
nt
	} while (${1:/* condition */});
nt
# While Loop
nt
snippet wh
nt
	while (${1:/* condition */}) {
nt
		${2:/* code */}
nt
	}
nt
# For Loop
nt
snippet for
nt
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
nt
		${4:/* code */}
nt
	}
nt
# Custom For Loop
nt
snippet forr
nt
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
nt
		${5:/* code */}
nt
	}
nt
# Function
nt
snippet fun
nt
	${1:void} ${2:function_name}(${3})
nt
	{
nt
		${4:/* code */}
nt
	}
nt
# Function Declaration
nt
snippet fund
nt
	${1:void} ${2:function_name}(${3});${4}
nt
# Typedef
nt
snippet td
nt
	typedef ${1:int} ${2:MyCustomType};${3}
nt
# Struct
nt
snippet st
nt
	struct ${1:`Filename('$1_t', 'name')`} {
nt
		${2:/* data */}
nt
	}${3: /* optional variable list */};${4}
nt
# Typedef struct
nt
snippet tds
nt
	typedef struct ${2:_$1 }{
nt
		${3:/* data */}
nt
	} ${1:`Filename('$1_t', 'name')`};
nt
# Typdef enum
nt
snippet tde
nt
	typedef enum {
nt
		${1:/* data */}
nt
	} ${2:foo};
nt
# printf
nt
# unfortunately version this isn't as nice as TextMates's, given the lack of a
nt
# dynamic `...`
nt
snippet pr
nt
	printf("${1:%s}\n"${2});${3}
nt
# fprintf (again, this isn't as nice as TextMate's version, but it works)
nt
snippet fpr
nt
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
nt
# This is kind of convenient
nt
snippet .
nt
	[${1}]${2}
nt
