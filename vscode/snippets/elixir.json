{
	"case": {
		"prefix": "case",
		"body": "case $1 do\n\t$2 ->\n\t\t$0\nend",
		"description": "case",
		"scope": "source.elixir"
	},
	"_def with doc test": {
		"prefix": "def",
		"body": [
			"@doc \"\"\"",
			"## Examples",
			"    iex>${TM_DIRECTORY/(^.+\\\/lib|\\b)\\\/(\\w+)/${1:? :.}${2:/pascalcase}/g}.${TM_FILENAME_BASE/(.+)/${1:/pascalcase}/}.${1:function}(1)",
			"    1",
			"\"\"\"",
			"def ${1:function}(${2:argument}) do",
			"  ${2:argument}",
			"end"
		],
		"description": "def with doc test"
	},
	"defmodule": {
		"prefix": "defm",
		"body": [
			"defmodule${TM_DIRECTORY/(^.+\\\/lib|\\b)\\\/(\\w+)/${1:? :.}${2:/pascalcase}/g}.${TM_FILENAME_BASE/(.+)/${1:/pascalcase}/} do",
			"  @moduledoc \"\"\"",
			"    $1",
			"  \"\"\"",
			"",
			"  $2",
			"end"
		],
		"description": "defmodule"
	},
	"defmodule test": {
		"prefix": "defmt",
		"body": [
			"defmodule${1:${TM_DIRECTORY/(^.+\\\/test|\\b)\\\/(\\w+)/${1:? :.}${2:/pascalcase}/g}.${TM_FILENAME_BASE/(.+)_test/${1:/pascalcase}/}}Test do",
			"  @moduledoc \"\"\"",
			"    test for$1",
			"  \"\"\"",
			"  use ExUnit.Case, async: true",
			"  doctest$1",
			"",
			"  $2",
			"end"
		],
		"description": "defmodule for test"
	},
	"def oneline": {
		"prefix": "df",
		"body": "def $1, do: $0",
		"description": "def oneline"
	},
	"describe": {
		"prefix": "desc",
		"body": "describe \"$1\" do\n\t$0\nend",
		"description": "describe"
	},
	"doc": {
		"prefix": "doc",
		"body": [
			"@doc \"\"\"",
			"$2",
			"\"\"\""
		],
		"description": "doc"
	},
	"doc test": {
		"prefix": "doct",
		"body": [
			"@doc \"\"\"",
			"    iex>${TM_DIRECTORY/(^.+\\\/lib|\\b)\\\/(\\w+)/${1:? :.}${2:/pascalcase}/g}.${TM_FILENAME_BASE/(.+)/${1:/pascalcase}/}.${1:function}(1)",
			"    1",
			"\"\"\""
		],
		"description": "doc test"
	},
	"_if is forbidden": {
		"prefix": "if",
		"body": [
			"case ${1} do",
			"  ${2:true} -> ${3:nil}",
			"end"
		],
		"description": "if is forbidden"
	},
	"case true false": {
		"prefix": "ife",
		"body": [
			"case ${1} do",
			"  true -> ${2}",
			"  false -> ${3}",
			"end"
		],
		"description": "case true false"
	},
	"with/else": {
		"prefix": "with",
		"body": [
			"with $1 do",
			"\t$0",
			"else",
			"\t$2 -> $3",
			"end"
		],
		"description": "with/else"
	},
	"fn": {
		"prefix": "fn",
		"body": "fn ${1:args} -> $2 end$0",
		"description": "fn"
	},
	"for": {
		"prefix": "for",
		"body": "for ${1:item} <- ${2:items} do\n  $0\nend",
		"description": "for"
	},
	"ok": {
		"prefix": "ok",
		"body": "{:ok, $1} $0",
		"description": "{:ok, ... } ..."
	},
	"err": {
		"prefix": "err",
		"body": "{:error, $1} $0",
		"description": "{:error, ... } ..."
	},
	"ii": {
		"prefix": "ii",
		"body": "IO.inspect($0)",
		"description": "IO.inspect"
	},
	// ecto
	"ecto schema": {
		"prefix": "sch",
		"body": [
			"use Model.Schema",
			"",
			"alias Ecto.Changeset",
			"alias __MODULE__",
			"",
			"@type t :: %${TM_FILENAME_BASE/(.+)/${1:/pascalcase}/}{}",
			"",
			"schema \"${TM_FILENAME_BASE}s\" do",
			"  timestamps(type: :utc_datetime)",
			"end"
		],
		"description": "ecto schema"
	},
	"ecto field": {
		"prefix": "fie",
		"body": "field(:$1, :${2:string})",
		"description": "ecto field"
	}
}