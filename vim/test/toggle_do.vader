Given elixir (SomeModule with functions):
  defmodule SomeModule do
    def upcase(name) when is_binary(name), do: String.upcase(name)
    def upcase(name) do
      String.upcase(name)
    end

    defp downcase(name) when is_binary(name), do: String.downcase(name)
    defp downcase(name) do
      String.downcase(name)
    end
  end
Do (toggle def when, do:):
  jtd
Expect elixir (def when do ... end):
  defmodule SomeModule do
    def upcase(name) when is_binary(name) do
      String.upcase(name)
    end
    def upcase(name) do
      String.upcase(name)
    end

    defp downcase(name) when is_binary(name), do: String.downcase(name)
    defp downcase(name) do
      String.downcase(name)
    end
  end
Do (toggle def when do):
  jtdtd
Expect elixir (def when, do:):
  defmodule SomeModule do
    def upcase(name) when is_binary(name), do: String.upcase(name)
    def upcase(name) do
      String.upcase(name)
    end

    defp downcase(name) when is_binary(name), do: String.downcase(name)
    defp downcase(name) do
      String.downcase(name)
    end
  end
Do (toggle def do):
  2jtd
Expect elixir (def do:):
  defmodule SomeModule do
    def upcase(name) when is_binary(name), do: String.upcase(name)
    def upcase(name), do: String.upcase(name)

    defp downcase(name) when is_binary(name), do: String.downcase(name)
    defp downcase(name) do
      String.downcase(name)
    end
  end
Do (toggle def do:):
  2jtdtd
Expect elixir (def do ... end):
  defmodule SomeModule do
    def upcase(name) when is_binary(name), do: String.upcase(name)
    def upcase(name) do
      String.upcase(name)
    end

    defp downcase(name) when is_binary(name), do: String.downcase(name)
    defp downcase(name) do
      String.downcase(name)
    end
  end
Do (toggle defp, when do:):
  6jtd
Expect elixir (defp when do ... end):
  defmodule SomeModule do
    def upcase(name) when is_binary(name), do: String.upcase(name)
    def upcase(name) do
      String.upcase(name)
    end

    defp downcase(name) when is_binary(name) do
      String.downcase(name)
    end
    defp downcase(name) do
      String.downcase(name)
    end
  end
Do (toggle defp when, do:):
  6jtdtd
Expect elixir (defp when do ... end):
  defmodule SomeModule do
    def upcase(name) when is_binary(name), do: String.upcase(name)
    def upcase(name) do
      String.upcase(name)
    end

    defp downcase(name) when is_binary(name), do: String.downcase(name)
    defp downcase(name) do
      String.downcase(name)
    end
  end
Do (toggle defp do):
  7jtd
Expect elixir (defp, do:):
  defmodule SomeModule do
    def upcase(name) when is_binary(name), do: String.upcase(name)
    def upcase(name) do
      String.upcase(name)
    end

    defp downcase(name) when is_binary(name), do: String.downcase(name)
    defp downcase(name), do: String.downcase(name)
  end
Do (toggle defp do:):
  7jtdtd
Expect elixir (defp do ... end):
  defmodule SomeModule do
    def upcase(name) when is_binary(name), do: String.upcase(name)
    def upcase(name) do
      String.upcase(name)
    end

    defp downcase(name) when is_binary(name), do: String.downcase(name)
    defp downcase(name) do
      String.downcase(name)
    end
  end
