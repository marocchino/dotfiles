snippet pres "private def resolver"
private

def resolver
	Resolvers::`!v substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`.new
end
endsnippet

snippet crest "resolver steps for create"
try :check_sign_in!, catch: Errors::QueryError
step :new
try :authorize!, catch: CanCan::AccessDenied
step :save

private

def check_sign_in!(input)
	input[:context][:requires_resource!].call
	input
end

def new(context:, **attrs)
	${1:model} = ::${1/(?:^|_)(\w)/\u$1/g}.new(attrs)
	Success($1: $1, context: context)
end

def authorize!(context:, $1:)
	context[:authorize!].call(:create, $1)
	{ $1: $1 }
end

def save($1:)
	if $1.save
		Success($1: $1)
	else
		Failure(ActiveRecord::RecordInvalid.new($1))
	end
end
endsnippet

snippet drest "resolver steps for delete"
try :check_sign_in!, catch: Errors::QueryError
try :find!, catch: ActiveRecord::RecordNotFound
try :authorize!, catch: CanCan::AccessDenied
step :destroy

private

def check_sign_in!(input)
	input[:context][:requires_resource!].call
	input
end

def find!(id:, context:)
	${1:model} = ::${1/(?:^|_)(\w)/\u$1/g}.find(id)
	{ $1: $1, context: context }
end

def authorize!(context:, $1:)
	context[:authorize!].call(:destroy, $1)
	{ $1: $1 }
end

def destroy($1:)
	$1.destroy!
	Success(deleted_id: $1.id)
end
endsnippet

snippet erest "resolver steps for edit"
try :check_sign_in!, catch: Errors::QueryError
try :find!, catch: ActiveRecord::RecordNotFound
try :authorize!, catch: CanCan::AccessDenied
step :update

private

def check_sign_in!(input)
	input[:context][:requires_resource!].call
	input
end

def find!(id:, **input)
	${1:model} = ::${1/(?:^|_)(\w)/\u$1/g}.find(id)
	{ $1: $1, **input }
end

def authorize!(context:, **input)
	context[:authorize!].call(:update, input[:$1])
	input
end

def update($1:, **attrs)
	if $1.update(attrs)
		Success($1: $1)
	else
		Failure(ActiveRecord::RecordInvalid.new($1))
	end
end
endsnippet

snippet srest "resolver steps for save"
try :check_sign_in!, catch: Errors::QueryError
step :find_or_new
try :authorize!, catch: CanCan::AccessDenied
step :save

private

def check_sign_in!(input)
	input[:context][:requires_resource!].call
	input
end

def find_or_new(context:, **input)
	${1:model} = ::${1/(?:^|_)(\w)/\u$1/g}.find_or_initialize_by(input)
	Success($1: $1, context: context)
end

def authorize!(context:, **input)
	context[:authorize!].call(:update, input[:$1])
	input
end

def save($1:)
	if $1.save
		Success($1: $1)
	else
		Failure(ActiveRecord::RecordInvalid.new($1))
	end
end
endsnippet
